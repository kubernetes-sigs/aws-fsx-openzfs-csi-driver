// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubernetes-sigs/aws-fsx-openzfs-csi-driver/pkg/cloud (interfaces: EC2Metadata)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	imds "github.com/aws/aws-sdk-go-v2/feature/ec2/imds"
	gomock "github.com/golang/mock/gomock"
)

// MockIMDS is a mock of IMDS interface.
type MockIMDS struct {
	ctrl     *gomock.Controller
	recorder *MockIMDSMockRecorder
}

// MockIMDSMockRecorder is the mock recorder for MockIMDS.
type MockIMDSMockRecorder struct {
	mock *MockIMDS
}

// NewMockIMDS creates a new mock instance.
func NewMockIMDS(ctrl *gomock.Controller) *MockIMDS {
	mock := &MockIMDS{ctrl: ctrl}
	mock.recorder = &MockIMDSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMDS) EXPECT() *MockIMDSMockRecorder {
	return m.recorder
}

// GetInstanceIdentityDocument mocks base method.
func (m *MockIMDS) GetInstanceIdentityDocument(arg0 context.Context, arg1 *imds.GetInstanceIdentityDocumentInput, arg2 ...func(*imds.Options)) (*imds.GetInstanceIdentityDocumentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstanceIdentityDocument", varargs...)
	ret0, _ := ret[0].(*imds.GetInstanceIdentityDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceIdentityDocument indicates an expected call of GetInstanceIdentityDocument.
func (mr *MockIMDSMockRecorder) GetInstanceIdentityDocument(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceIdentityDocument", reflect.TypeOf((*MockIMDS)(nil).GetInstanceIdentityDocument), varargs...)
}

// GetMetadata mocks base method.
func (m *MockIMDS) GetMetadata(arg0 context.Context, arg1 *imds.GetMetadataInput, arg2 ...func(*imds.Options)) (*imds.GetMetadataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetadata", varargs...)
	ret0, _ := ret[0].(*imds.GetMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockIMDSMockRecorder) GetMetadata(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockIMDS)(nil).GetMetadata), varargs...)
}
